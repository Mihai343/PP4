class ContactList(list):
    def search(self, name):
        matching_contacts = []
        for contact in self:
            if name in contact.name:
                matching_contacts.append(contact)
        return matching_contacts


class Contact:
    def __init__(self, name, email): # constructor
        self.name = name
        self.email = email
    # echivalentul supraincarcarii operator<< din c++

    def __repr__(self):
        return "Contact({}, {})".format(self.name, self.email)


class Agenda:
    all_contacts = ContactList()

    def add_contact(self, contact):
        self.all_contacts.append(contact)

    def print_agenda(self):
        for contact in self.all_contacts:
            print(contact)


class Friend(Contact):
    def __init__(self, name, email, phone):
        super().__init__(name, email)
        self.phone = phone

# acest bloc se executa doar cand se apeleaza acest script
# se recomanda folosirea acestui bloc pentru a nu se executa la import


if __name__ == '__main__':

    print("1.Pnetru adaugare in agenda introduceti:1 \n"
          "2.Pentru afisarea contactelor :2 "
          "3.Iesire din program:3")
    agenda = Agenda()
    i=int(input(" da valoare bai"))

    while(True):
        if i==1:
            String=input()
            string2=input()
            agenda.add_contact(Contact(String,string2))
        if i==2:
            agenda.print_agenda()
        if i==3:
            break
        print("1.Pnetru adaugare in agenda introduceti:1 \n"
              "2.Pentru afisarea contactelor :2 \n"
              "3.Iesire din program:3")
        i=int(input(" da valoare bai"))
